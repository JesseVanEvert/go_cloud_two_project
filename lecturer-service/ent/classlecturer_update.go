// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/classlecturer"
	"lecturer/ent/lecturer"
	"lecturer/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLecturerUpdate is the builder for updating ClassLecturer entities.
type ClassLecturerUpdate struct {
	config
	hooks    []Hook
	mutation *ClassLecturerMutation
}

// Where appends a list predicates to the ClassLecturerUpdate builder.
func (clu *ClassLecturerUpdate) Where(ps ...predicate.ClassLecturer) *ClassLecturerUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetDeletedAt sets the "deleted_at" field.
func (clu *ClassLecturerUpdate) SetDeletedAt(t time.Time) *ClassLecturerUpdate {
	clu.mutation.SetDeletedAt(t)
	return clu
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (clu *ClassLecturerUpdate) SetClassID(id int) *ClassLecturerUpdate {
	clu.mutation.SetClassID(id)
	return clu
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (clu *ClassLecturerUpdate) SetNillableClassID(id *int) *ClassLecturerUpdate {
	if id != nil {
		clu = clu.SetClassID(*id)
	}
	return clu
}

// SetClass sets the "class" edge to the Class entity.
func (clu *ClassLecturerUpdate) SetClass(c *Class) *ClassLecturerUpdate {
	return clu.SetClassID(c.ID)
}

// SetLecturerID sets the "lecturer" edge to the Lecturer entity by ID.
func (clu *ClassLecturerUpdate) SetLecturerID(id int) *ClassLecturerUpdate {
	clu.mutation.SetLecturerID(id)
	return clu
}

// SetNillableLecturerID sets the "lecturer" edge to the Lecturer entity by ID if the given value is not nil.
func (clu *ClassLecturerUpdate) SetNillableLecturerID(id *int) *ClassLecturerUpdate {
	if id != nil {
		clu = clu.SetLecturerID(*id)
	}
	return clu
}

// SetLecturer sets the "lecturer" edge to the Lecturer entity.
func (clu *ClassLecturerUpdate) SetLecturer(l *Lecturer) *ClassLecturerUpdate {
	return clu.SetLecturerID(l.ID)
}

// Mutation returns the ClassLecturerMutation object of the builder.
func (clu *ClassLecturerUpdate) Mutation() *ClassLecturerMutation {
	return clu.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (clu *ClassLecturerUpdate) ClearClass() *ClassLecturerUpdate {
	clu.mutation.ClearClass()
	return clu
}

// ClearLecturer clears the "lecturer" edge to the Lecturer entity.
func (clu *ClassLecturerUpdate) ClearLecturer() *ClassLecturerUpdate {
	clu.mutation.ClearLecturer()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *ClassLecturerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassLecturerMutation](ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *ClassLecturerUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *ClassLecturerUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *ClassLecturerUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *ClassLecturerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classlecturer.Table,
			Columns: classlecturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classlecturer.FieldID,
			},
		},
	}
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.DeletedAt(); ok {
		_spec.SetField(classlecturer.FieldDeletedAt, field.TypeTime, value)
	}
	if clu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.ClassTable,
			Columns: []string{classlecturer.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.ClassTable,
			Columns: []string{classlecturer.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.LecturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.LecturerTable,
			Columns: []string{classlecturer.LecturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lecturer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.LecturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.LecturerTable,
			Columns: []string{classlecturer.LecturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lecturer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classlecturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// ClassLecturerUpdateOne is the builder for updating a single ClassLecturer entity.
type ClassLecturerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassLecturerMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (cluo *ClassLecturerUpdateOne) SetDeletedAt(t time.Time) *ClassLecturerUpdateOne {
	cluo.mutation.SetDeletedAt(t)
	return cluo
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (cluo *ClassLecturerUpdateOne) SetClassID(id int) *ClassLecturerUpdateOne {
	cluo.mutation.SetClassID(id)
	return cluo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (cluo *ClassLecturerUpdateOne) SetNillableClassID(id *int) *ClassLecturerUpdateOne {
	if id != nil {
		cluo = cluo.SetClassID(*id)
	}
	return cluo
}

// SetClass sets the "class" edge to the Class entity.
func (cluo *ClassLecturerUpdateOne) SetClass(c *Class) *ClassLecturerUpdateOne {
	return cluo.SetClassID(c.ID)
}

// SetLecturerID sets the "lecturer" edge to the Lecturer entity by ID.
func (cluo *ClassLecturerUpdateOne) SetLecturerID(id int) *ClassLecturerUpdateOne {
	cluo.mutation.SetLecturerID(id)
	return cluo
}

// SetNillableLecturerID sets the "lecturer" edge to the Lecturer entity by ID if the given value is not nil.
func (cluo *ClassLecturerUpdateOne) SetNillableLecturerID(id *int) *ClassLecturerUpdateOne {
	if id != nil {
		cluo = cluo.SetLecturerID(*id)
	}
	return cluo
}

// SetLecturer sets the "lecturer" edge to the Lecturer entity.
func (cluo *ClassLecturerUpdateOne) SetLecturer(l *Lecturer) *ClassLecturerUpdateOne {
	return cluo.SetLecturerID(l.ID)
}

// Mutation returns the ClassLecturerMutation object of the builder.
func (cluo *ClassLecturerUpdateOne) Mutation() *ClassLecturerMutation {
	return cluo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (cluo *ClassLecturerUpdateOne) ClearClass() *ClassLecturerUpdateOne {
	cluo.mutation.ClearClass()
	return cluo
}

// ClearLecturer clears the "lecturer" edge to the Lecturer entity.
func (cluo *ClassLecturerUpdateOne) ClearLecturer() *ClassLecturerUpdateOne {
	cluo.mutation.ClearLecturer()
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *ClassLecturerUpdateOne) Select(field string, fields ...string) *ClassLecturerUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated ClassLecturer entity.
func (cluo *ClassLecturerUpdateOne) Save(ctx context.Context) (*ClassLecturer, error) {
	return withHooks[*ClassLecturer, ClassLecturerMutation](ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *ClassLecturerUpdateOne) SaveX(ctx context.Context) *ClassLecturer {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *ClassLecturerUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *ClassLecturerUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *ClassLecturerUpdateOne) sqlSave(ctx context.Context) (_node *ClassLecturer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classlecturer.Table,
			Columns: classlecturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classlecturer.FieldID,
			},
		},
	}
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClassLecturer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classlecturer.FieldID)
		for _, f := range fields {
			if !classlecturer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != classlecturer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.DeletedAt(); ok {
		_spec.SetField(classlecturer.FieldDeletedAt, field.TypeTime, value)
	}
	if cluo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.ClassTable,
			Columns: []string{classlecturer.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.ClassTable,
			Columns: []string{classlecturer.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.LecturerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.LecturerTable,
			Columns: []string{classlecturer.LecturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lecturer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.LecturerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classlecturer.LecturerTable,
			Columns: []string{classlecturer.LecturerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lecturer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClassLecturer{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classlecturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
