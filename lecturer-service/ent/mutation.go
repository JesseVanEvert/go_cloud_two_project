// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/classlecturer"
	"lecturer/ent/lecturer"
	"lecturer/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClass         = "Class"
	TypeClassLecturer = "ClassLecturer"
	TypeLecturer      = "Lecturer"
)

// ClassMutation represents an operation that mutates the Class nodes in the graph.
type ClassMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	clearedFields          map[string]struct{}
	class_lecturers        map[int]struct{}
	removedclass_lecturers map[int]struct{}
	clearedclass_lecturers bool
	done                   bool
	oldValue               func(context.Context) (*Class, error)
	predicates             []predicate.Class
}

var _ ent.Mutation = (*ClassMutation)(nil)

// classOption allows management of the mutation configuration using functional options.
type classOption func(*ClassMutation)

// newClassMutation creates new mutation for the Class entity.
func newClassMutation(c config, op Op, opts ...classOption) *ClassMutation {
	m := &ClassMutation{
		config:        c,
		op:            op,
		typ:           TypeClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassID sets the ID field of the mutation.
func withClassID(id int) classOption {
	return func(m *ClassMutation) {
		var (
			err   error
			once  sync.Once
			value *Class
		)
		m.oldValue = func(ctx context.Context) (*Class, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Class.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClass sets the old Class of the mutation.
func withClass(node *Class) classOption {
	return func(m *ClassMutation) {
		m.oldValue = func(context.Context) (*Class, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Class.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClassMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClassMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClassMutation) ResetName() {
	m.name = nil
}

// AddClassLecturerIDs adds the "class_lecturers" edge to the ClassLecturer entity by ids.
func (m *ClassMutation) AddClassLecturerIDs(ids ...int) {
	if m.class_lecturers == nil {
		m.class_lecturers = make(map[int]struct{})
	}
	for i := range ids {
		m.class_lecturers[ids[i]] = struct{}{}
	}
}

// ClearClassLecturers clears the "class_lecturers" edge to the ClassLecturer entity.
func (m *ClassMutation) ClearClassLecturers() {
	m.clearedclass_lecturers = true
}

// ClassLecturersCleared reports if the "class_lecturers" edge to the ClassLecturer entity was cleared.
func (m *ClassMutation) ClassLecturersCleared() bool {
	return m.clearedclass_lecturers
}

// RemoveClassLecturerIDs removes the "class_lecturers" edge to the ClassLecturer entity by IDs.
func (m *ClassMutation) RemoveClassLecturerIDs(ids ...int) {
	if m.removedclass_lecturers == nil {
		m.removedclass_lecturers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.class_lecturers, ids[i])
		m.removedclass_lecturers[ids[i]] = struct{}{}
	}
}

// RemovedClassLecturers returns the removed IDs of the "class_lecturers" edge to the ClassLecturer entity.
func (m *ClassMutation) RemovedClassLecturersIDs() (ids []int) {
	for id := range m.removedclass_lecturers {
		ids = append(ids, id)
	}
	return
}

// ClassLecturersIDs returns the "class_lecturers" edge IDs in the mutation.
func (m *ClassMutation) ClassLecturersIDs() (ids []int) {
	for id := range m.class_lecturers {
		ids = append(ids, id)
	}
	return
}

// ResetClassLecturers resets all changes to the "class_lecturers" edge.
func (m *ClassMutation) ResetClassLecturers() {
	m.class_lecturers = nil
	m.clearedclass_lecturers = false
	m.removedclass_lecturers = nil
}

// Where appends a list predicates to the ClassMutation builder.
func (m *ClassMutation) Where(ps ...predicate.Class) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Class, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Class).
func (m *ClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, class.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case class.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case class.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Class field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case class.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Class numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Class nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassMutation) ResetField(name string) error {
	switch name {
	case class.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.class_lecturers != nil {
		edges = append(edges, class.EdgeClassLecturers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeClassLecturers:
		ids := make([]ent.Value, 0, len(m.class_lecturers))
		for id := range m.class_lecturers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclass_lecturers != nil {
		edges = append(edges, class.EdgeClassLecturers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case class.EdgeClassLecturers:
		ids := make([]ent.Value, 0, len(m.removedclass_lecturers))
		for id := range m.removedclass_lecturers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclass_lecturers {
		edges = append(edges, class.EdgeClassLecturers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassMutation) EdgeCleared(name string) bool {
	switch name {
	case class.EdgeClassLecturers:
		return m.clearedclass_lecturers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Class unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassMutation) ResetEdge(name string) error {
	switch name {
	case class.EdgeClassLecturers:
		m.ResetClassLecturers()
		return nil
	}
	return fmt.Errorf("unknown Class edge %s", name)
}

// ClassLecturerMutation represents an operation that mutates the ClassLecturer nodes in the graph.
type ClassLecturerMutation struct {
	config
	op              Op
	typ             string
	id              *int
	deleted_at      *time.Time
	clearedFields   map[string]struct{}
	class           *int
	clearedclass    bool
	lecturer        *int
	clearedlecturer bool
	done            bool
	oldValue        func(context.Context) (*ClassLecturer, error)
	predicates      []predicate.ClassLecturer
}

var _ ent.Mutation = (*ClassLecturerMutation)(nil)

// classlecturerOption allows management of the mutation configuration using functional options.
type classlecturerOption func(*ClassLecturerMutation)

// newClassLecturerMutation creates new mutation for the ClassLecturer entity.
func newClassLecturerMutation(c config, op Op, opts ...classlecturerOption) *ClassLecturerMutation {
	m := &ClassLecturerMutation{
		config:        c,
		op:            op,
		typ:           TypeClassLecturer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassLecturerID sets the ID field of the mutation.
func withClassLecturerID(id int) classlecturerOption {
	return func(m *ClassLecturerMutation) {
		var (
			err   error
			once  sync.Once
			value *ClassLecturer
		)
		m.oldValue = func(ctx context.Context) (*ClassLecturer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClassLecturer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClassLecturer sets the old ClassLecturer of the mutation.
func withClassLecturer(node *ClassLecturer) classlecturerOption {
	return func(m *ClassLecturerMutation) {
		m.oldValue = func(context.Context) (*ClassLecturer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassLecturerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassLecturerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassLecturerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassLecturerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClassLecturer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ClassLecturerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ClassLecturerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ClassLecturer entity.
// If the ClassLecturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassLecturerMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ClassLecturerMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetClassID sets the "class" edge to the Class entity by id.
func (m *ClassLecturerMutation) SetClassID(id int) {
	m.class = &id
}

// ClearClass clears the "class" edge to the Class entity.
func (m *ClassLecturerMutation) ClearClass() {
	m.clearedclass = true
}

// ClassCleared reports if the "class" edge to the Class entity was cleared.
func (m *ClassLecturerMutation) ClassCleared() bool {
	return m.clearedclass
}

// ClassID returns the "class" edge ID in the mutation.
func (m *ClassLecturerMutation) ClassID() (id int, exists bool) {
	if m.class != nil {
		return *m.class, true
	}
	return
}

// ClassIDs returns the "class" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClassID instead. It exists only for internal usage by the builders.
func (m *ClassLecturerMutation) ClassIDs() (ids []int) {
	if id := m.class; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClass resets all changes to the "class" edge.
func (m *ClassLecturerMutation) ResetClass() {
	m.class = nil
	m.clearedclass = false
}

// SetLecturerID sets the "lecturer" edge to the Lecturer entity by id.
func (m *ClassLecturerMutation) SetLecturerID(id int) {
	m.lecturer = &id
}

// ClearLecturer clears the "lecturer" edge to the Lecturer entity.
func (m *ClassLecturerMutation) ClearLecturer() {
	m.clearedlecturer = true
}

// LecturerCleared reports if the "lecturer" edge to the Lecturer entity was cleared.
func (m *ClassLecturerMutation) LecturerCleared() bool {
	return m.clearedlecturer
}

// LecturerID returns the "lecturer" edge ID in the mutation.
func (m *ClassLecturerMutation) LecturerID() (id int, exists bool) {
	if m.lecturer != nil {
		return *m.lecturer, true
	}
	return
}

// LecturerIDs returns the "lecturer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LecturerID instead. It exists only for internal usage by the builders.
func (m *ClassLecturerMutation) LecturerIDs() (ids []int) {
	if id := m.lecturer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLecturer resets all changes to the "lecturer" edge.
func (m *ClassLecturerMutation) ResetLecturer() {
	m.lecturer = nil
	m.clearedlecturer = false
}

// Where appends a list predicates to the ClassLecturerMutation builder.
func (m *ClassLecturerMutation) Where(ps ...predicate.ClassLecturer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassLecturerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassLecturerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClassLecturer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassLecturerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassLecturerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClassLecturer).
func (m *ClassLecturerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassLecturerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.deleted_at != nil {
		fields = append(fields, classlecturer.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassLecturerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case classlecturer.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassLecturerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case classlecturer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ClassLecturer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassLecturerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case classlecturer.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ClassLecturer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassLecturerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassLecturerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassLecturerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClassLecturer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassLecturerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassLecturerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassLecturerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClassLecturer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassLecturerMutation) ResetField(name string) error {
	switch name {
	case classlecturer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ClassLecturer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassLecturerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.class != nil {
		edges = append(edges, classlecturer.EdgeClass)
	}
	if m.lecturer != nil {
		edges = append(edges, classlecturer.EdgeLecturer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassLecturerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case classlecturer.EdgeClass:
		if id := m.class; id != nil {
			return []ent.Value{*id}
		}
	case classlecturer.EdgeLecturer:
		if id := m.lecturer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassLecturerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassLecturerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassLecturerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclass {
		edges = append(edges, classlecturer.EdgeClass)
	}
	if m.clearedlecturer {
		edges = append(edges, classlecturer.EdgeLecturer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassLecturerMutation) EdgeCleared(name string) bool {
	switch name {
	case classlecturer.EdgeClass:
		return m.clearedclass
	case classlecturer.EdgeLecturer:
		return m.clearedlecturer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassLecturerMutation) ClearEdge(name string) error {
	switch name {
	case classlecturer.EdgeClass:
		m.ClearClass()
		return nil
	case classlecturer.EdgeLecturer:
		m.ClearLecturer()
		return nil
	}
	return fmt.Errorf("unknown ClassLecturer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassLecturerMutation) ResetEdge(name string) error {
	switch name {
	case classlecturer.EdgeClass:
		m.ResetClass()
		return nil
	case classlecturer.EdgeLecturer:
		m.ResetLecturer()
		return nil
	}
	return fmt.Errorf("unknown ClassLecturer edge %s", name)
}

// LecturerMutation represents an operation that mutates the Lecturer nodes in the graph.
type LecturerMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	first_name             *string
	last_name              *string
	email                  *string
	deleted_at             *string
	clearedFields          map[string]struct{}
	class_lecturers        map[int]struct{}
	removedclass_lecturers map[int]struct{}
	clearedclass_lecturers bool
	done                   bool
	oldValue               func(context.Context) (*Lecturer, error)
	predicates             []predicate.Lecturer
}

var _ ent.Mutation = (*LecturerMutation)(nil)

// lecturerOption allows management of the mutation configuration using functional options.
type lecturerOption func(*LecturerMutation)

// newLecturerMutation creates new mutation for the Lecturer entity.
func newLecturerMutation(c config, op Op, opts ...lecturerOption) *LecturerMutation {
	m := &LecturerMutation{
		config:        c,
		op:            op,
		typ:           TypeLecturer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLecturerID sets the ID field of the mutation.
func withLecturerID(id int) lecturerOption {
	return func(m *LecturerMutation) {
		var (
			err   error
			once  sync.Once
			value *Lecturer
		)
		m.oldValue = func(ctx context.Context) (*Lecturer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lecturer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLecturer sets the old Lecturer of the mutation.
func withLecturer(node *Lecturer) lecturerOption {
	return func(m *LecturerMutation) {
		m.oldValue = func(context.Context) (*Lecturer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LecturerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LecturerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LecturerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LecturerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Lecturer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *LecturerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *LecturerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Lecturer entity.
// If the Lecturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LecturerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *LecturerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *LecturerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *LecturerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Lecturer entity.
// If the Lecturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LecturerMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *LecturerMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *LecturerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *LecturerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Lecturer entity.
// If the Lecturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LecturerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *LecturerMutation) ResetEmail() {
	m.email = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *LecturerMutation) SetDeletedAt(s string) {
	m.deleted_at = &s
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *LecturerMutation) DeletedAt() (r string, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Lecturer entity.
// If the Lecturer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LecturerMutation) OldDeletedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *LecturerMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// AddClassLecturerIDs adds the "class_lecturers" edge to the ClassLecturer entity by ids.
func (m *LecturerMutation) AddClassLecturerIDs(ids ...int) {
	if m.class_lecturers == nil {
		m.class_lecturers = make(map[int]struct{})
	}
	for i := range ids {
		m.class_lecturers[ids[i]] = struct{}{}
	}
}

// ClearClassLecturers clears the "class_lecturers" edge to the ClassLecturer entity.
func (m *LecturerMutation) ClearClassLecturers() {
	m.clearedclass_lecturers = true
}

// ClassLecturersCleared reports if the "class_lecturers" edge to the ClassLecturer entity was cleared.
func (m *LecturerMutation) ClassLecturersCleared() bool {
	return m.clearedclass_lecturers
}

// RemoveClassLecturerIDs removes the "class_lecturers" edge to the ClassLecturer entity by IDs.
func (m *LecturerMutation) RemoveClassLecturerIDs(ids ...int) {
	if m.removedclass_lecturers == nil {
		m.removedclass_lecturers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.class_lecturers, ids[i])
		m.removedclass_lecturers[ids[i]] = struct{}{}
	}
}

// RemovedClassLecturers returns the removed IDs of the "class_lecturers" edge to the ClassLecturer entity.
func (m *LecturerMutation) RemovedClassLecturersIDs() (ids []int) {
	for id := range m.removedclass_lecturers {
		ids = append(ids, id)
	}
	return
}

// ClassLecturersIDs returns the "class_lecturers" edge IDs in the mutation.
func (m *LecturerMutation) ClassLecturersIDs() (ids []int) {
	for id := range m.class_lecturers {
		ids = append(ids, id)
	}
	return
}

// ResetClassLecturers resets all changes to the "class_lecturers" edge.
func (m *LecturerMutation) ResetClassLecturers() {
	m.class_lecturers = nil
	m.clearedclass_lecturers = false
	m.removedclass_lecturers = nil
}

// Where appends a list predicates to the LecturerMutation builder.
func (m *LecturerMutation) Where(ps ...predicate.Lecturer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LecturerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LecturerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lecturer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LecturerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LecturerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lecturer).
func (m *LecturerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LecturerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.first_name != nil {
		fields = append(fields, lecturer.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, lecturer.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, lecturer.FieldEmail)
	}
	if m.deleted_at != nil {
		fields = append(fields, lecturer.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LecturerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lecturer.FieldFirstName:
		return m.FirstName()
	case lecturer.FieldLastName:
		return m.LastName()
	case lecturer.FieldEmail:
		return m.Email()
	case lecturer.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LecturerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lecturer.FieldFirstName:
		return m.OldFirstName(ctx)
	case lecturer.FieldLastName:
		return m.OldLastName(ctx)
	case lecturer.FieldEmail:
		return m.OldEmail(ctx)
	case lecturer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Lecturer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LecturerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lecturer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case lecturer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case lecturer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case lecturer.FieldDeletedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Lecturer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LecturerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LecturerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LecturerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lecturer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LecturerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LecturerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LecturerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lecturer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LecturerMutation) ResetField(name string) error {
	switch name {
	case lecturer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case lecturer.FieldLastName:
		m.ResetLastName()
		return nil
	case lecturer.FieldEmail:
		m.ResetEmail()
		return nil
	case lecturer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Lecturer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LecturerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.class_lecturers != nil {
		edges = append(edges, lecturer.EdgeClassLecturers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LecturerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lecturer.EdgeClassLecturers:
		ids := make([]ent.Value, 0, len(m.class_lecturers))
		for id := range m.class_lecturers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LecturerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclass_lecturers != nil {
		edges = append(edges, lecturer.EdgeClassLecturers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LecturerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lecturer.EdgeClassLecturers:
		ids := make([]ent.Value, 0, len(m.removedclass_lecturers))
		for id := range m.removedclass_lecturers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LecturerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclass_lecturers {
		edges = append(edges, lecturer.EdgeClassLecturers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LecturerMutation) EdgeCleared(name string) bool {
	switch name {
	case lecturer.EdgeClassLecturers:
		return m.clearedclass_lecturers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LecturerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Lecturer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LecturerMutation) ResetEdge(name string) error {
	switch name {
	case lecturer.EdgeClassLecturers:
		m.ResetClassLecturers()
		return nil
	}
	return fmt.Errorf("unknown Lecturer edge %s", name)
}
