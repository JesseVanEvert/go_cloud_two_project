// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"lecturer/ent/classlecturer"
	"lecturer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLecturerDelete is the builder for deleting a ClassLecturer entity.
type ClassLecturerDelete struct {
	config
	hooks    []Hook
	mutation *ClassLecturerMutation
}

// Where appends a list predicates to the ClassLecturerDelete builder.
func (cld *ClassLecturerDelete) Where(ps ...predicate.ClassLecturer) *ClassLecturerDelete {
	cld.mutation.Where(ps...)
	return cld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cld *ClassLecturerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ClassLecturerMutation](ctx, cld.sqlExec, cld.mutation, cld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cld *ClassLecturerDelete) ExecX(ctx context.Context) int {
	n, err := cld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cld *ClassLecturerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: classlecturer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classlecturer.FieldID,
			},
		},
	}
	if ps := cld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cld.mutation.done = true
	return affected, err
}

// ClassLecturerDeleteOne is the builder for deleting a single ClassLecturer entity.
type ClassLecturerDeleteOne struct {
	cld *ClassLecturerDelete
}

// Where appends a list predicates to the ClassLecturerDelete builder.
func (cldo *ClassLecturerDeleteOne) Where(ps ...predicate.ClassLecturer) *ClassLecturerDeleteOne {
	cldo.cld.mutation.Where(ps...)
	return cldo
}

// Exec executes the deletion query.
func (cldo *ClassLecturerDeleteOne) Exec(ctx context.Context) error {
	n, err := cldo.cld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{classlecturer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cldo *ClassLecturerDeleteOne) ExecX(ctx context.Context) {
	if err := cldo.Exec(ctx); err != nil {
		panic(err)
	}
}
