// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/lecturer"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LecturerCreate is the builder for creating a Lecturer entity.
type LecturerCreate struct {
	config
	mutation *LecturerMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (lc *LecturerCreate) SetFirstName(s string) *LecturerCreate {
	lc.mutation.SetFirstName(s)
	return lc
}

// SetLastName sets the "last_name" field.
func (lc *LecturerCreate) SetLastName(s string) *LecturerCreate {
	lc.mutation.SetLastName(s)
	return lc
}

// SetEmail sets the "email" field.
func (lc *LecturerCreate) SetEmail(s string) *LecturerCreate {
	lc.mutation.SetEmail(s)
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *LecturerCreate) SetDeletedAt(s string) *LecturerCreate {
	lc.mutation.SetDeletedAt(s)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *LecturerCreate) SetNillableDeletedAt(s *string) *LecturerCreate {
	if s != nil {
		lc.SetDeletedAt(*s)
	}
	return lc
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (lc *LecturerCreate) AddClassIDs(ids ...int) *LecturerCreate {
	lc.mutation.AddClassIDs(ids...)
	return lc
}

// AddClasses adds the "classes" edges to the Class entity.
func (lc *LecturerCreate) AddClasses(c ...*Class) *LecturerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddClassIDs(ids...)
}

// Mutation returns the LecturerMutation object of the builder.
func (lc *LecturerCreate) Mutation() *LecturerMutation {
	return lc.mutation
}

// Save creates the Lecturer in the database.
func (lc *LecturerCreate) Save(ctx context.Context) (*Lecturer, error) {
	return withHooks[*Lecturer, LecturerMutation](ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LecturerCreate) SaveX(ctx context.Context) *Lecturer {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LecturerCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LecturerCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LecturerCreate) check() error {
	if _, ok := lc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Lecturer.first_name"`)}
	}
	if _, ok := lc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Lecturer.last_name"`)}
	}
	if _, ok := lc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Lecturer.email"`)}
	}
	return nil
}

func (lc *LecturerCreate) sqlSave(ctx context.Context) (*Lecturer, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LecturerCreate) createSpec() (*Lecturer, *sqlgraph.CreateSpec) {
	var (
		_node = &Lecturer{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lecturer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lecturer.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.FirstName(); ok {
		_spec.SetField(lecturer.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := lc.mutation.LastName(); ok {
		_spec.SetField(lecturer.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := lc.mutation.Email(); ok {
		_spec.SetField(lecturer.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.SetField(lecturer.FieldDeletedAt, field.TypeString, value)
		_node.DeletedAt = value
	}
	if nodes := lc.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LecturerCreateBulk is the builder for creating many Lecturer entities in bulk.
type LecturerCreateBulk struct {
	config
	builders []*LecturerCreate
}

// Save creates the Lecturer entities in the database.
func (lcb *LecturerCreateBulk) Save(ctx context.Context) ([]*Lecturer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lecturer, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LecturerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LecturerCreateBulk) SaveX(ctx context.Context) []*Lecturer {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LecturerCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LecturerCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
