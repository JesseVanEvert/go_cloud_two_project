// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/lecturer"
	"lecturer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LecturerUpdate is the builder for updating Lecturer entities.
type LecturerUpdate struct {
	config
	hooks    []Hook
	mutation *LecturerMutation
}

// Where appends a list predicates to the LecturerUpdate builder.
func (lu *LecturerUpdate) Where(ps ...predicate.Lecturer) *LecturerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetFirstName sets the "first_name" field.
func (lu *LecturerUpdate) SetFirstName(s string) *LecturerUpdate {
	lu.mutation.SetFirstName(s)
	return lu
}

// SetLastName sets the "last_name" field.
func (lu *LecturerUpdate) SetLastName(s string) *LecturerUpdate {
	lu.mutation.SetLastName(s)
	return lu
}

// SetEmail sets the "email" field.
func (lu *LecturerUpdate) SetEmail(s string) *LecturerUpdate {
	lu.mutation.SetEmail(s)
	return lu
}

// SetDeletedAt sets the "deleted_at" field.
func (lu *LecturerUpdate) SetDeletedAt(s string) *LecturerUpdate {
	lu.mutation.SetDeletedAt(s)
	return lu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lu *LecturerUpdate) SetNillableDeletedAt(s *string) *LecturerUpdate {
	if s != nil {
		lu.SetDeletedAt(*s)
	}
	return lu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lu *LecturerUpdate) ClearDeletedAt() *LecturerUpdate {
	lu.mutation.ClearDeletedAt()
	return lu
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (lu *LecturerUpdate) AddClassIDs(ids ...int) *LecturerUpdate {
	lu.mutation.AddClassIDs(ids...)
	return lu
}

// AddClasses adds the "classes" edges to the Class entity.
func (lu *LecturerUpdate) AddClasses(c ...*Class) *LecturerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddClassIDs(ids...)
}

// Mutation returns the LecturerMutation object of the builder.
func (lu *LecturerUpdate) Mutation() *LecturerMutation {
	return lu.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (lu *LecturerUpdate) ClearClasses() *LecturerUpdate {
	lu.mutation.ClearClasses()
	return lu
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (lu *LecturerUpdate) RemoveClassIDs(ids ...int) *LecturerUpdate {
	lu.mutation.RemoveClassIDs(ids...)
	return lu
}

// RemoveClasses removes "classes" edges to Class entities.
func (lu *LecturerUpdate) RemoveClasses(c ...*Class) *LecturerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveClassIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LecturerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LecturerMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LecturerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LecturerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LecturerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LecturerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lecturer.Table,
			Columns: lecturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lecturer.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.FirstName(); ok {
		_spec.SetField(lecturer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := lu.mutation.LastName(); ok {
		_spec.SetField(lecturer.FieldLastName, field.TypeString, value)
	}
	if value, ok := lu.mutation.Email(); ok {
		_spec.SetField(lecturer.FieldEmail, field.TypeString, value)
	}
	if value, ok := lu.mutation.DeletedAt(); ok {
		_spec.SetField(lecturer.FieldDeletedAt, field.TypeString, value)
	}
	if lu.mutation.DeletedAtCleared() {
		_spec.ClearField(lecturer.FieldDeletedAt, field.TypeString)
	}
	if lu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedClassesIDs(); len(nodes) > 0 && !lu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lecturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LecturerUpdateOne is the builder for updating a single Lecturer entity.
type LecturerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LecturerMutation
}

// SetFirstName sets the "first_name" field.
func (luo *LecturerUpdateOne) SetFirstName(s string) *LecturerUpdateOne {
	luo.mutation.SetFirstName(s)
	return luo
}

// SetLastName sets the "last_name" field.
func (luo *LecturerUpdateOne) SetLastName(s string) *LecturerUpdateOne {
	luo.mutation.SetLastName(s)
	return luo
}

// SetEmail sets the "email" field.
func (luo *LecturerUpdateOne) SetEmail(s string) *LecturerUpdateOne {
	luo.mutation.SetEmail(s)
	return luo
}

// SetDeletedAt sets the "deleted_at" field.
func (luo *LecturerUpdateOne) SetDeletedAt(s string) *LecturerUpdateOne {
	luo.mutation.SetDeletedAt(s)
	return luo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (luo *LecturerUpdateOne) SetNillableDeletedAt(s *string) *LecturerUpdateOne {
	if s != nil {
		luo.SetDeletedAt(*s)
	}
	return luo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (luo *LecturerUpdateOne) ClearDeletedAt() *LecturerUpdateOne {
	luo.mutation.ClearDeletedAt()
	return luo
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (luo *LecturerUpdateOne) AddClassIDs(ids ...int) *LecturerUpdateOne {
	luo.mutation.AddClassIDs(ids...)
	return luo
}

// AddClasses adds the "classes" edges to the Class entity.
func (luo *LecturerUpdateOne) AddClasses(c ...*Class) *LecturerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddClassIDs(ids...)
}

// Mutation returns the LecturerMutation object of the builder.
func (luo *LecturerUpdateOne) Mutation() *LecturerMutation {
	return luo.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (luo *LecturerUpdateOne) ClearClasses() *LecturerUpdateOne {
	luo.mutation.ClearClasses()
	return luo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (luo *LecturerUpdateOne) RemoveClassIDs(ids ...int) *LecturerUpdateOne {
	luo.mutation.RemoveClassIDs(ids...)
	return luo
}

// RemoveClasses removes "classes" edges to Class entities.
func (luo *LecturerUpdateOne) RemoveClasses(c ...*Class) *LecturerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveClassIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LecturerUpdateOne) Select(field string, fields ...string) *LecturerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lecturer entity.
func (luo *LecturerUpdateOne) Save(ctx context.Context) (*Lecturer, error) {
	return withHooks[*Lecturer, LecturerMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LecturerUpdateOne) SaveX(ctx context.Context) *Lecturer {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LecturerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LecturerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LecturerUpdateOne) sqlSave(ctx context.Context) (_node *Lecturer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lecturer.Table,
			Columns: lecturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lecturer.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lecturer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lecturer.FieldID)
		for _, f := range fields {
			if !lecturer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lecturer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.FirstName(); ok {
		_spec.SetField(lecturer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := luo.mutation.LastName(); ok {
		_spec.SetField(lecturer.FieldLastName, field.TypeString, value)
	}
	if value, ok := luo.mutation.Email(); ok {
		_spec.SetField(lecturer.FieldEmail, field.TypeString, value)
	}
	if value, ok := luo.mutation.DeletedAt(); ok {
		_spec.SetField(lecturer.FieldDeletedAt, field.TypeString, value)
	}
	if luo.mutation.DeletedAtCleared() {
		_spec.ClearField(lecturer.FieldDeletedAt, field.TypeString)
	}
	if luo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !luo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   lecturer.ClassesTable,
			Columns: lecturer.ClassesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lecturer{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lecturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
