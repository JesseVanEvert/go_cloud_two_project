// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/classlecturer"
	"lecturer/ent/lecturer"
	"lecturer/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLecturerQuery is the builder for querying ClassLecturer entities.
type ClassLecturerQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.ClassLecturer
	withClass    *ClassQuery
	withLecturer *LecturerQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassLecturerQuery builder.
func (clq *ClassLecturerQuery) Where(ps ...predicate.ClassLecturer) *ClassLecturerQuery {
	clq.predicates = append(clq.predicates, ps...)
	return clq
}

// Limit the number of records to be returned by this query.
func (clq *ClassLecturerQuery) Limit(limit int) *ClassLecturerQuery {
	clq.ctx.Limit = &limit
	return clq
}

// Offset to start from.
func (clq *ClassLecturerQuery) Offset(offset int) *ClassLecturerQuery {
	clq.ctx.Offset = &offset
	return clq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clq *ClassLecturerQuery) Unique(unique bool) *ClassLecturerQuery {
	clq.ctx.Unique = &unique
	return clq
}

// Order specifies how the records should be ordered.
func (clq *ClassLecturerQuery) Order(o ...OrderFunc) *ClassLecturerQuery {
	clq.order = append(clq.order, o...)
	return clq
}

// QueryClass chains the current query on the "class" edge.
func (clq *ClassLecturerQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classlecturer.Table, classlecturer.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, classlecturer.ClassTable, classlecturer.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLecturer chains the current query on the "lecturer" edge.
func (clq *ClassLecturerQuery) QueryLecturer() *LecturerQuery {
	query := (&LecturerClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classlecturer.Table, classlecturer.FieldID, selector),
			sqlgraph.To(lecturer.Table, lecturer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, classlecturer.LecturerTable, classlecturer.LecturerColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClassLecturer entity from the query.
// Returns a *NotFoundError when no ClassLecturer was found.
func (clq *ClassLecturerQuery) First(ctx context.Context) (*ClassLecturer, error) {
	nodes, err := clq.Limit(1).All(setContextOp(ctx, clq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{classlecturer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clq *ClassLecturerQuery) FirstX(ctx context.Context) *ClassLecturer {
	node, err := clq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClassLecturer ID from the query.
// Returns a *NotFoundError when no ClassLecturer ID was found.
func (clq *ClassLecturerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(1).IDs(setContextOp(ctx, clq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{classlecturer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clq *ClassLecturerQuery) FirstIDX(ctx context.Context) int {
	id, err := clq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClassLecturer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClassLecturer entity is found.
// Returns a *NotFoundError when no ClassLecturer entities are found.
func (clq *ClassLecturerQuery) Only(ctx context.Context) (*ClassLecturer, error) {
	nodes, err := clq.Limit(2).All(setContextOp(ctx, clq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{classlecturer.Label}
	default:
		return nil, &NotSingularError{classlecturer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clq *ClassLecturerQuery) OnlyX(ctx context.Context) *ClassLecturer {
	node, err := clq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClassLecturer ID in the query.
// Returns a *NotSingularError when more than one ClassLecturer ID is found.
// Returns a *NotFoundError when no entities are found.
func (clq *ClassLecturerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(2).IDs(setContextOp(ctx, clq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{classlecturer.Label}
	default:
		err = &NotSingularError{classlecturer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clq *ClassLecturerQuery) OnlyIDX(ctx context.Context) int {
	id, err := clq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClassLecturers.
func (clq *ClassLecturerQuery) All(ctx context.Context) ([]*ClassLecturer, error) {
	ctx = setContextOp(ctx, clq.ctx, "All")
	if err := clq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClassLecturer, *ClassLecturerQuery]()
	return withInterceptors[[]*ClassLecturer](ctx, clq, qr, clq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clq *ClassLecturerQuery) AllX(ctx context.Context) []*ClassLecturer {
	nodes, err := clq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClassLecturer IDs.
func (clq *ClassLecturerQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, clq.ctx, "IDs")
	if err := clq.Select(classlecturer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clq *ClassLecturerQuery) IDsX(ctx context.Context) []int {
	ids, err := clq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clq *ClassLecturerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clq.ctx, "Count")
	if err := clq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clq, querierCount[*ClassLecturerQuery](), clq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clq *ClassLecturerQuery) CountX(ctx context.Context) int {
	count, err := clq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clq *ClassLecturerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clq.ctx, "Exist")
	switch _, err := clq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clq *ClassLecturerQuery) ExistX(ctx context.Context) bool {
	exist, err := clq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassLecturerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clq *ClassLecturerQuery) Clone() *ClassLecturerQuery {
	if clq == nil {
		return nil
	}
	return &ClassLecturerQuery{
		config:       clq.config,
		ctx:          clq.ctx.Clone(),
		order:        append([]OrderFunc{}, clq.order...),
		inters:       append([]Interceptor{}, clq.inters...),
		predicates:   append([]predicate.ClassLecturer{}, clq.predicates...),
		withClass:    clq.withClass.Clone(),
		withLecturer: clq.withLecturer.Clone(),
		// clone intermediate query.
		sql:  clq.sql.Clone(),
		path: clq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ClassLecturerQuery) WithClass(opts ...func(*ClassQuery)) *ClassLecturerQuery {
	query := (&ClassClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withClass = query
	return clq
}

// WithLecturer tells the query-builder to eager-load the nodes that are connected to
// the "lecturer" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ClassLecturerQuery) WithLecturer(opts ...func(*LecturerQuery)) *ClassLecturerQuery {
	query := (&LecturerClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withLecturer = query
	return clq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClassLecturer.Query().
//		GroupBy(classlecturer.FieldDeletedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (clq *ClassLecturerQuery) GroupBy(field string, fields ...string) *ClassLecturerGroupBy {
	clq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClassLecturerGroupBy{build: clq}
	grbuild.flds = &clq.ctx.Fields
	grbuild.label = classlecturer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.ClassLecturer.Query().
//		Select(classlecturer.FieldDeletedAt).
//		Scan(ctx, &v)
func (clq *ClassLecturerQuery) Select(fields ...string) *ClassLecturerSelect {
	clq.ctx.Fields = append(clq.ctx.Fields, fields...)
	sbuild := &ClassLecturerSelect{ClassLecturerQuery: clq}
	sbuild.label = classlecturer.Label
	sbuild.flds, sbuild.scan = &clq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClassLecturerSelect configured with the given aggregations.
func (clq *ClassLecturerQuery) Aggregate(fns ...AggregateFunc) *ClassLecturerSelect {
	return clq.Select().Aggregate(fns...)
}

func (clq *ClassLecturerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clq); err != nil {
				return err
			}
		}
	}
	for _, f := range clq.ctx.Fields {
		if !classlecturer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if clq.path != nil {
		prev, err := clq.path(ctx)
		if err != nil {
			return err
		}
		clq.sql = prev
	}
	return nil
}

func (clq *ClassLecturerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClassLecturer, error) {
	var (
		nodes       = []*ClassLecturer{}
		withFKs     = clq.withFKs
		_spec       = clq.querySpec()
		loadedTypes = [2]bool{
			clq.withClass != nil,
			clq.withLecturer != nil,
		}
	)
	if clq.withClass != nil || clq.withLecturer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, classlecturer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClassLecturer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClassLecturer{config: clq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clq.withClass; query != nil {
		if err := clq.loadClass(ctx, query, nodes, nil,
			func(n *ClassLecturer, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withLecturer; query != nil {
		if err := clq.loadLecturer(ctx, query, nodes, nil,
			func(n *ClassLecturer, e *Lecturer) { n.Edges.Lecturer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clq *ClassLecturerQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*ClassLecturer, init func(*ClassLecturer), assign func(*ClassLecturer, *Class)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ClassLecturer)
	for i := range nodes {
		if nodes[i].class_class_lecturers == nil {
			continue
		}
		fk := *nodes[i].class_class_lecturers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_class_lecturers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clq *ClassLecturerQuery) loadLecturer(ctx context.Context, query *LecturerQuery, nodes []*ClassLecturer, init func(*ClassLecturer), assign func(*ClassLecturer, *Lecturer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ClassLecturer)
	for i := range nodes {
		if nodes[i].lecturer_class_lecturers == nil {
			continue
		}
		fk := *nodes[i].lecturer_class_lecturers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lecturer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lecturer_class_lecturers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (clq *ClassLecturerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clq.querySpec()
	_spec.Node.Columns = clq.ctx.Fields
	if len(clq.ctx.Fields) > 0 {
		_spec.Unique = clq.ctx.Unique != nil && *clq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clq.driver, _spec)
}

func (clq *ClassLecturerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classlecturer.Table,
			Columns: classlecturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classlecturer.FieldID,
			},
		},
		From:   clq.sql,
		Unique: true,
	}
	if unique := clq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := clq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classlecturer.FieldID)
		for i := range fields {
			if fields[i] != classlecturer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := clq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clq *ClassLecturerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clq.driver.Dialect())
	t1 := builder.Table(classlecturer.Table)
	columns := clq.ctx.Fields
	if len(columns) == 0 {
		columns = classlecturer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clq.sql != nil {
		selector = clq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clq.ctx.Unique != nil && *clq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clq.predicates {
		p(selector)
	}
	for _, p := range clq.order {
		p(selector)
	}
	if offset := clq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassLecturerGroupBy is the group-by builder for ClassLecturer entities.
type ClassLecturerGroupBy struct {
	selector
	build *ClassLecturerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clgb *ClassLecturerGroupBy) Aggregate(fns ...AggregateFunc) *ClassLecturerGroupBy {
	clgb.fns = append(clgb.fns, fns...)
	return clgb
}

// Scan applies the selector query and scans the result into the given value.
func (clgb *ClassLecturerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clgb.build.ctx, "GroupBy")
	if err := clgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLecturerQuery, *ClassLecturerGroupBy](ctx, clgb.build, clgb, clgb.build.inters, v)
}

func (clgb *ClassLecturerGroupBy) sqlScan(ctx context.Context, root *ClassLecturerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clgb.fns))
	for _, fn := range clgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clgb.flds)+len(clgb.fns))
		for _, f := range *clgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClassLecturerSelect is the builder for selecting fields of ClassLecturer entities.
type ClassLecturerSelect struct {
	*ClassLecturerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cls *ClassLecturerSelect) Aggregate(fns ...AggregateFunc) *ClassLecturerSelect {
	cls.fns = append(cls.fns, fns...)
	return cls
}

// Scan applies the selector query and scans the result into the given value.
func (cls *ClassLecturerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cls.ctx, "Select")
	if err := cls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLecturerQuery, *ClassLecturerSelect](ctx, cls.ClassLecturerQuery, cls, cls.inters, v)
}

func (cls *ClassLecturerSelect) sqlScan(ctx context.Context, root *ClassLecturerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cls.fns))
	for _, fn := range cls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
