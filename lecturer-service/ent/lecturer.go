// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lecturer/ent/lecturer"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Lecturer is the model entity for the Lecturer schema.
type Lecturer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt string `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LecturerQuery when eager-loading is set.
	Edges LecturerEdges `json:"edges"`
}

// LecturerEdges holds the relations/edges for other nodes in the graph.
type LecturerEdges struct {
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e LecturerEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lecturer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lecturer.FieldID:
			values[i] = new(sql.NullInt64)
		case lecturer.FieldFirstName, lecturer.FieldLastName, lecturer.FieldEmail, lecturer.FieldDeletedAt:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lecturer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lecturer fields.
func (l *Lecturer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lecturer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case lecturer.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				l.FirstName = value.String
			}
		case lecturer.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				l.LastName = value.String
			}
		case lecturer.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				l.Email = value.String
			}
		case lecturer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = value.String
			}
		}
	}
	return nil
}

// QueryClasses queries the "classes" edge of the Lecturer entity.
func (l *Lecturer) QueryClasses() *ClassQuery {
	return NewLecturerClient(l.config).QueryClasses(l)
}

// Update returns a builder for updating this Lecturer.
// Note that you need to call Lecturer.Unwrap() before calling this method if this Lecturer
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lecturer) Update() *LecturerUpdateOne {
	return NewLecturerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lecturer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lecturer) Unwrap() *Lecturer {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lecturer is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lecturer) String() string {
	var builder strings.Builder
	builder.WriteString("Lecturer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("first_name=")
	builder.WriteString(l.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(l.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(l.Email)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(l.DeletedAt)
	builder.WriteByte(')')
	return builder.String()
}

// Lecturers is a parsable slice of Lecturer.
type Lecturers []*Lecturer

func (l Lecturers) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
