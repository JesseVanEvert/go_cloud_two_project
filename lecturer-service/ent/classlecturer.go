// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lecturer/ent/class"
	"lecturer/ent/classlecturer"
	"lecturer/ent/lecturer"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ClassLecturer is the model entity for the ClassLecturer schema.
type ClassLecturer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassLecturerQuery when eager-loading is set.
	Edges                    ClassLecturerEdges `json:"edges"`
	class_class_lecturers    *int
	lecturer_class_lecturers *int
}

// ClassLecturerEdges holds the relations/edges for other nodes in the graph.
type ClassLecturerEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Lecturer holds the value of the lecturer edge.
	Lecturer *Lecturer `json:"lecturer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassLecturerEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// LecturerOrErr returns the Lecturer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClassLecturerEdges) LecturerOrErr() (*Lecturer, error) {
	if e.loadedTypes[1] {
		if e.Lecturer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lecturer.Label}
		}
		return e.Lecturer, nil
	}
	return nil, &NotLoadedError{edge: "lecturer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClassLecturer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case classlecturer.FieldID:
			values[i] = new(sql.NullInt64)
		case classlecturer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case classlecturer.ForeignKeys[0]: // class_class_lecturers
			values[i] = new(sql.NullInt64)
		case classlecturer.ForeignKeys[1]: // lecturer_class_lecturers
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ClassLecturer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClassLecturer fields.
func (cl *ClassLecturer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case classlecturer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case classlecturer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cl.DeletedAt = value.Time
			}
		case classlecturer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_class_lecturers", value)
			} else if value.Valid {
				cl.class_class_lecturers = new(int)
				*cl.class_class_lecturers = int(value.Int64)
			}
		case classlecturer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lecturer_class_lecturers", value)
			} else if value.Valid {
				cl.lecturer_class_lecturers = new(int)
				*cl.lecturer_class_lecturers = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryClass queries the "class" edge of the ClassLecturer entity.
func (cl *ClassLecturer) QueryClass() *ClassQuery {
	return NewClassLecturerClient(cl.config).QueryClass(cl)
}

// QueryLecturer queries the "lecturer" edge of the ClassLecturer entity.
func (cl *ClassLecturer) QueryLecturer() *LecturerQuery {
	return NewClassLecturerClient(cl.config).QueryLecturer(cl)
}

// Update returns a builder for updating this ClassLecturer.
// Note that you need to call ClassLecturer.Unwrap() before calling this method if this ClassLecturer
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *ClassLecturer) Update() *ClassLecturerUpdateOne {
	return NewClassLecturerClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the ClassLecturer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *ClassLecturer) Unwrap() *ClassLecturer {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClassLecturer is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *ClassLecturer) String() string {
	var builder strings.Builder
	builder.WriteString("ClassLecturer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(cl.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClassLecturers is a parsable slice of ClassLecturer.
type ClassLecturers []*ClassLecturer

func (cl ClassLecturers) config(cfg config) {
	for _i := range cl {
		cl[_i].config = cfg
	}
}
