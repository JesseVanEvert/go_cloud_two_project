version: '3'

services:

  lecturer-service:
    build:
      context: ./../lecturer-service
      dockerfile: ./../lecturer-service/lecturer-service.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      mode: replicated
      replicas: 1
  messagedb:
    container_name: "message_db"
    platform: linux/x86_64
    build:
      context: ./../message-service
      dockerfile: ./../message-service/db.Dockerfile
    networks:
      - default
    restart: always
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3306:3306"
    # setting some env vars to create the DB
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "secret"
      MYSQL_DATABASE: "message"
      MYSQL_USER: "tester"
      MYSQL_PASSWORD: "secret"
      # OR if you want to use "root" as the user, just these two lines
      # MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      # MYSQL_DATABASE: ${DATABASE_NAME}

    # we mount a data volume to make sure we don't lose data
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
  message-service:
    container_name:  "message_api"
    environment:
      SENDGRID_API_KEY: "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"
    # we want to use the image which is build from our Dockerfile
    build:
      context: ./../message-service
      dockerfile: ./../message-service/api.Dockerfile
    ports:
      - "8089:89"
    deploy:
      mode: replicated
      replicas: 1
    # we are depending on the mysql backend
    depends_on:
      - messagedb
    # We mount the working dir into the container, handy for development
    # This is what makes the hot reloading work inside of a Docker container
    volumes:
      - .:/app/
networks:
  default:
volumes:
  mysql_data: